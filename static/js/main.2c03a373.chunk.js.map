{"version":3,"sources":["components/HomeScreen.js","components/Simulator.js","components/Overlay.js","components/CamScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["HomeScreen","setCamOpen","className","size","onClick","Simulator","setOverlay","simulatorValue","setSimulatorValue","useState","value","setValue","onChange","style","stroke","strokeWidth","cursor","transform","Overlay","orientation","attachListener","overlay","JSON","stringify","CamScreen","setOrientation","filter","setFilter","deviceOrientationHandler","e","alpha","beta","gamma","useEffect","window","DeviceOrientationEvent","addEventListener","removeEventListener","degrees","videoConstraints","facingMode","DeviceMotionEvent","requestPermission","then","response","catch","console","error","App","camOpen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2c03a373.chunk.js","sourcesContent":["import React from 'react';\nimport { FaCameraRetro } from 'react-icons/fa';\nimport './HomeScreen.scss';\n\nconst HomeScreen = ({ setCamOpen }) => (\n\t<div className=\"HomeScreen\">\n\t\t<h1>Tilt Saturate</h1>\n\t\t<FaCameraRetro size={56} />\n\t\t<button onClick={() => setCamOpen(true)}>Open Camera</button>\n\t</div>\n);\n\nexport default HomeScreen;\n","import React, { useState } from 'react';\r\nimport { FiArrowLeftCircle } from 'react-icons/fi';\r\nimport { MdPhoneIphone } from 'react-icons/md';\r\nimport {\r\n\tCircularInput,\r\n\tCircularTrack,\r\n\tCircularThumb,\r\n} from 'react-circular-input';\r\nimport './Simulator.scss';\r\n\r\nconst Simulator = ({ setOverlay, simulatorValue, setSimulatorValue }) => {\r\n\tconst [value, setValue] = useState(0);\r\n\r\n\tconst setSimValue = (value) => {\r\n\t\tsetValue(value);\r\n\t\tsetSimulatorValue(value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"Simulator\">\r\n\t\t\t<div className=\"top\">\r\n\t\t\t\t<div onClick={() => setOverlay(false)} className=\"icon-wrapper\">\r\n\t\t\t\t\t<FiArrowLeftCircle size={40} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"main-content\">\r\n\t\t\t\t<h3>\r\n\t\t\t\t\tNot on a mobile device? <br /> Use this tilt simulator:\r\n\t\t\t\t</h3>\r\n\t\t\t\t<div className=\"control\">\r\n\t\t\t\t\t<CircularInput\r\n\t\t\t\t\t\tvalue={simulatorValue || 0}\r\n\t\t\t\t\t\tonChange={setSimValue}\r\n\t\t\t\t\t\tclassName=\"simulator-control\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CircularTrack style={{ stroke: 'white', strokeWidth: 10 }} />\r\n\t\t\t\t\t\t<CircularThumb style={{ cursor: 'pointer' }} />\r\n\t\t\t\t\t</CircularInput>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"icon-wrapper\"\r\n\t\t\t\t\t\tstyle={{ transform: `rotate(${value * 360}deg)` }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<MdPhoneIphone size={110} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Simulator;\r\n","import React from 'react';\nimport { FaCameraRetro } from 'react-icons/fa';\nimport { GiAnticlockwiseRotation, GiClockwiseRotation } from 'react-icons/gi';\nimport { FiArrowLeftCircle, FiInfo } from 'react-icons/fi';\nimport { MdPhoneIphone } from 'react-icons/md';\nimport Simulator from './Simulator';\n\nimport './Overlay.scss';\n\nconst Overlay = ({\n\tsetCamOpen,\n\torientation,\n\tattachListener,\n\toverlay,\n\tsetOverlay,\n\tsimulatorValue,\n\tsetSimulatorValue,\n}) => {\n\treturn (\n\t\t<div className=\"Overlay\">\n\t\t\t{overlay === 'instructions' && (\n\t\t\t\t<div className=\"instructions\">\n\t\t\t\t\t<h1>Tilt Saturate</h1>\n\t\t\t\t\t<div className=\"icons\">\n\t\t\t\t\t\t<GiAnticlockwiseRotation size={44} />\n\t\t\t\t\t\t<FaCameraRetro size={56} />\n\t\t\t\t\t\t<GiClockwiseRotation size={44} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>Tilt your device clockwise to saturate the image.</p>\n\t\t\t\t\t<p>Tilt it counterclockwise to desaturate it.</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"alternate got-it\"\n\t\t\t\t\t\tonClick={() => setOverlay(false)}\n\t\t\t\t\t>\n\t\t\t\t\t\tGot it!\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"warning\">\n\t\t\t\t\t\tNot working? You may need to{' '}\n\t\t\t\t\t\t<button className=\"understated\" onClick={attachListener}>\n\t\t\t\t\t\t\tgive your browser permission\n\t\t\t\t\t\t</button>{' '}\n\t\t\t\t\t\tto use the gyroscope.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{overlay === 'simulator' && (\n\t\t\t\t<Simulator\n\t\t\t\t\tsetOverlay={setOverlay}\n\t\t\t\t\tsimulatorValue={simulatorValue}\n\t\t\t\t\tsetSimulatorValue={setSimulatorValue}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{!overlay && (\n\t\t\t\t<div className=\"menu\">\n\t\t\t\t\t<div className=\"top\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => setCamOpen(false)}\n\t\t\t\t\t\t\tclassName=\"icon-wrapper\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FiArrowLeftCircle size={40} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => setOverlay('instructions')}\n\t\t\t\t\t\t\tclassName=\"icon-wrapper\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FiInfo size={40} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bottom\">\n\t\t\t\t\t\t<pre>{JSON.stringify(orientation, null, 2)}</pre>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => setOverlay('simulator')}\n\t\t\t\t\t\t\tclassName=\"icon-wrapper phone-simulator\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MdPhoneIphone size={40} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Overlay;\n","import React, { useState, useEffect } from 'react';\nimport Webcam from 'react-webcam';\nimport Overlay from './Overlay';\n\nimport './CamScreen.scss';\n\nconst CamScreen = ({ setCamOpen }) => {\n\tconst [overlay, setOverlay] = useState('instructions');\n\tconst [orientation, setOrientation] = useState('orientation');\n\tconst [simulatorValue, setSimulatorValue] = useState(0);\n\tconst [filter, setFilter] = useState('saturate(100%)');\n\n\tconst deviceOrientationHandler = (e) => {\n\t\tconst { alpha, beta, gamma } = e;\n\t\tsetOrientation({ alpha, beta, gamma });\n\t};\n\n\tconst attachListener = () => {\n\t\tif (typeof DeviceMotionEvent.requestPermission === 'function') {\n\t\t\tDeviceOrientationEvent.requestPermission()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tif (response === 'granted') {\n\t\t\t\t\t\twindow.addEventListener(\n\t\t\t\t\t\t\t'deviceorientation',\n\t\t\t\t\t\t\tdeviceOrientationHandler\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(console.error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (window.DeviceOrientationEvent) {\n\t\t\twindow.addEventListener('deviceorientation', deviceOrientationHandler);\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (window.DeviceOrientationEvent) {\n\t\t\t\twindow.removeEventListener(\n\t\t\t\t\t'deviceorientation',\n\t\t\t\t\tdeviceOrientationHandler\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst degrees = simulatorValue * 360;\n\t\tconst simulatorGamma = degrees > 180 ? -360 + degrees : degrees;\n\t\tconst gamma =\n\t\t\toverlay === 'simulator' ? simulatorGamma : orientation.gamma;\n\t\tconst filter =\n\t\t\tgamma < 0\n\t\t\t\t? `saturate(${100 + gamma}%)`\n\t\t\t\t: `saturate(${100 + gamma * 2}%)`;\n\t\tsetFilter(filter);\n\t}, [orientation, simulatorValue, overlay]);\n\n\treturn (\n\t\t<div className=\"CamScreen\">\n\t\t\t<Webcam\n\t\t\t\tvideoConstraints={{ facingMode: 'user' }}\n\t\t\t\tclassName=\"Webcam\"\n\t\t\t\tstyle={{ filter }}\n\t\t\t/>\n\t\t\t<Overlay\n\t\t\t\tsetCamOpen={setCamOpen}\n\t\t\t\torientation={orientation}\n\t\t\t\tattachListener={attachListener}\n\t\t\t\toverlay={overlay}\n\t\t\t\tsetOverlay={setOverlay}\n\t\t\t\tsimulatorValue={simulatorValue}\n\t\t\t\tsetSimulatorValue={setSimulatorValue}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default CamScreen;\n","import React, { useState } from 'react';\nimport HomeScreen from './HomeScreen';\nimport CamScreen from './CamScreen';\n\nconst App = () => {\n\tconst [camOpen, setCamOpen] = useState(false);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{!camOpen && <HomeScreen setCamOpen={setCamOpen} />}\n\t\t\t{camOpen && <CamScreen setCamOpen={setCamOpen} />}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}